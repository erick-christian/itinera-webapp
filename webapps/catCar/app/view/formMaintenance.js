/*
 * File: app/view/formMaintenance.js
 *
 * This file was generated by Sencha Architect version 3.5.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('catCar.view.formMaintenance', {
    extend: 'Ext.form.Panel',
    alias: 'widget.formMaintenance',

    requires: [
        'catCar.view.formMaintenanceViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.toolbar.Fill',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Column',
        'Ext.toolbar.Paging'
    ],

    viewModel: {
        type: 'formmaintenance'
    },
    id: 'formMaintenance',
    itemId: 'formMaintenance',
    ui: 'green-panel',
    layout: 'column',
    bodyPadding: 10,
    manageHeight: false,
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            id: 'toolbarMaintenance',
            itemId: 'toolbarMaintenance',
            items: [
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        Ext.getCmp('formMaintenance').showCars();
                    },
                    id: 'btnView',
                    itemId: 'btnView',
                    width: 120,
                    iconCls: 'ion-eye icon16',
                    text: 'View',
                    textAlign: 'left'
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var winCars = Ext.getCmp('winCars');

                        if (!winCars) {
                            winCars = Ext.create('widget.winCars');
                            winCars.show();
                            trex.hideScrollBars();
                        }
                    },
                    id: 'btnCreate',
                    itemId: 'btnCreate',
                    width: 120,
                    iconCls: 'ion-plus-circled icon16',
                    text: 'Create',
                    textAlign: 'left'
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var msgFunction = function () {
                            Ext.getCmp('formMaintenance').deleteCars();

                        };

                        var msgType = 'question';
                        var msgTitle = 'Delete Cars';
                        var msgContent = 'Do you want to delete the Cars record: ';

                        trex.message(msgType,
                            msgTitle,
                            msgContent,
                            msgFunction);

                        return;
                    },
                    id: 'btnDelete',
                    itemId: 'btnDelete',
                    width: 120,
                    iconCls: 'ion-trash-a icon16',
                    text: 'Delete',
                    textAlign: 'left'
                },
                {
                    xtype: 'tbseparator',
                    width: 30
                },
                {
                    xtype: 'button',
                    id: 'btnFind',
                    itemId: 'btnFind',
                    width: 120,
                    iconCls: 'ion-ios-search-strong icon16',
                    text: 'Find',
                    textAlign: 'left'
                },
                {
                    xtype: 'button',
                    id: 'btnFilter',
                    itemId: 'btnFilter',
                    width: 120,
                    iconCls: 'ion-funnel icon16',
                    text: 'Filter',
                    textAlign: 'left'
                },
                {
                    xtype: 'tbseparator',
                    width: 30
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    id: 'btnInformation',
                    itemId: 'btnInformation',
                    width: 120,
                    iconCls: 'ion-information-circled icon16',
                    text: 'Information',
                    textAlign: 'left'
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var win = window.parent.Ext.getCmp('catCar');
                        if (win)win[win.closeAction]();
                    },
                    id: 'btnExit',
                    itemId: 'btnExit',
                    width: 120,
                    iconCls: 'ion-android-exit icon16',
                    text: 'Exit',
                    textAlign: 'left'
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            columnWidth: 1,
            id: 'gridCars',
            itemId: 'gridCars',
            ui: 'green-panel',
            width: 1200,
            title: 'Cars',
            columnLines: false,
            forceFit: false,
            store: 'storeCar',
            viewConfig: {
                height: 400,
                maxHeight: 300,
                width: 200
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    id: 'car_id',
                    itemId: 'car_id',
                    dataIndex: 'car_id',
                    text: 'Car ID'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'car_description',
                    itemId: 'car_description',
                    dataIndex: 'car_description',
                    text: 'Car Description'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'maker',
                    itemId: 'maker',
                    maxWidth: 200,
                    width: 300,
                    dataIndex: 'maker',
                    text: 'Maker'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'type',
                    itemId: 'type',
                    maxWidth: 250,
                    width: 150,
                    dataIndex: 'type',
                    text: 'Type'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'cly',
                    itemId: 'cly',
                    dataIndex: 'cly',
                    text: 'Cly'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'model',
                    itemId: 'model',
                    dataIndex: 'model',
                    text: 'Model'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'event',
                    itemId: 'event',
                    dataIndex: 'event',
                    text: 'Event'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'event_date',
                    itemId: 'event_date',
                    dataIndex: 'event_date',
                    text: 'Event Date'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'created_date',
                    itemId: 'created_date',
                    dataIndex: 'event_date',
                    text: 'Fecha </br> Registro'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'isactive',
                    itemId: 'isactive',
                    maxWidth: 50,
                    minWidth: 30,
                    dataIndex: 'is_active',
                    text: 'Active'
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    id: 'pagingToolbar',
                    itemId: 'pagingToolbar',
                    width: 260,
                    displayInfo: true,
                    store: 'storeCar'
                }
            ],
            listeners: {
                itemdblclick: 'onGridCarsItemDblClick',
                itemclick: 'onGridCarsItemClick'
            }
        },
        {
            xtype: 'gridpanel',
            columnWidth: 0.5,
            height: 350,
            id: 'gridUserCar',
            itemId: 'gridUserCar',
            margin: '5 5 5 0',
            ui: 'green-panel',
            title: 'User Car',
            columnLines: false,
            forceFit: false,
            store: 'storeUserCar',
            viewConfig: {
                height: 400
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    id: 'user_id',
                    itemId: 'user_id',
                    maxWidth: 80,
                    dataIndex: 'user_id',
                    text: 'User ID'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'user_name',
                    itemId: 'user_name',
                    maxWidth: 380,
                    width: 380,
                    dataIndex: 'user_name',
                    text: 'User  Name'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'preferred',
                    itemId: 'preferred',
                    maxWidth: 70,
                    width: 70,
                    dataIndex: 'preferred',
                    text: 'Preferred'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'isactive2',
                    itemId: 'isactive2',
                    maxWidth: 60,
                    width: 60,
                    dataIndex: 'is_active',
                    text: 'Active'
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    id: 'pagingToolbar2',
                    itemId: 'pagingToolbar2',
                    width: 260,
                    displayInfo: true,
                    store: 'storeUserCar'
                }
            ],
            listeners: {
                itemdblclick: 'onGridUserCarItemDblClick',
                itemclick: 'onGridUserCarItemClick'
            }
        },
        {
            xtype: 'gridpanel',
            columnWidth: 0.5,
            height: 350,
            id: 'gridEventCar',
            itemId: 'gridEventCar',
            margin: '5 5 5 5',
            ui: 'green-panel',
            title: 'Event Car',
            columnLines: false,
            forceFit: false,
            store: 'storeEventCar',
            viewConfig: {
                height: 400
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    id: 'event2',
                    itemId: 'event2',
                    maxWidth: 170,
                    width: 170,
                    dataIndex: 'event',
                    text: 'Event'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'event_date2',
                    itemId: 'event_date2',
                    maxWidth: 80,
                    width: 80,
                    dataIndex: 'event_date',
                    text: 'Event Date'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'actions',
                    itemId: 'actions',
                    maxWidth: 260,
                    width: 260,
                    dataIndex: 'actions',
                    text: 'Actions'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'actions_end_date',
                    itemId: 'actions_end_date',
                    dataIndex: 'actions_end_date',
                    text: 'Actions </br> End Date'
                },
                {
                    xtype: 'gridcolumn',
                    id: 'isactive3',
                    itemId: 'isactive2',
                    dataIndex: 'is_active',
                    text: 'Active'
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    id: 'pagingToolbar3',
                    itemId: 'pagingToolbar2',
                    width: 260,
                    displayInfo: true,
                    store: 'storeEventCar'
                }
            ],
            listeners: {
                itemdblclick: 'onGridEventCarItemDblClick',
                itemclick: 'onGridEventCarItemClick'
            }
        }
    ],

    onGridCarsItemDblClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').showCars();
    },

    onGridCarsItemClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').CarsID = record.data.id;
        Ext.getCmp('formMaintenance').CarsRecord = record.data;
    },

    onGridUserCarItemDblClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').showUserCars();
    },

    onGridUserCarItemClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').UserCarsID = record.data.id;
        Ext.getCmp('formMaintenance').UserCarsRecord = record.data;
    },

    onGridEventCarItemDblClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').showUserCars();
    },

    onGridEventCarItemClick: function (dataview, record, item, index, e, eOpts) {
        Ext.getCmp('formMaintenance').UserCarsID = record.data.id;
        Ext.getCmp('formMaintenance').UserCarsRecord = record.data;
    },

    showCars: function (pMode) {
        var apiController = 'apiCar';
        var apiMethod = 'showCar';
        var objJsonData = new Object();
        objJsonData.CarsID = Ext.getCmp('formMaintenance').CarsID;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod = apiMethod;
        objJsonRequest.apiData = JSON.stringify(objJsonData);

        var functionSuccess = function () {
            var jsonData = trex.getInfoDataBridge(apiController);


            var winCars = Ext.getCmp('winCars');

            if (!winCars) {
                winCars = Ext.create('widget.winCars');
                winCars.show();
                trex.hideScrollBars();
            }

            trex.showRecord(jsonData, 'Cars');

        };

        var functionFailure = function () {
            var jsonData = trex.getInfoDataBridge(apiController);
        };

        trex.doDataBridge(objJsonRequest,
            functionSuccess,
            null,
            functionFailure,
            null);
    },

    deleteCars: function () {
        alert('registro borrado');

        var formRecord = 'formCars';
        var apiController = 'apiCars';
        var apiMethod = 'deleteCars';

        var objJsonData = new Object();
        objJsonData.CarsId = Ext.getCmp('formMaintenance').CarsRecord.id;

        var objJsonRequest = new Object();
        objJsonRequest.apiController = apiController;
        objJsonRequest.apiMethod = apiMethod;
        objJsonRequest.apiData = JSON.stringify(objJsonData);

        var functionSuccess = function () {
            var jsonData = trex.getInfoDataBridge(apiController);

            console.log(jsonData);
            trex.showInfo(jsonData, 'info');

        };

        var functionFailure = function () {
            var jsonData = trex.getInfoDataBridge(apiController);
            trex.showInfo(jsonData, 'error', 'tfCompany');
        };

        trex.doDataBridge(objJsonRequest,
            functionSuccess,
            null,
            functionFailure,
            null);
    }

});